/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/generals-space/crd-ipkeeper/pkg/apis/ipkeeper/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StaticIPsLister helps list StaticIPses.
type StaticIPsLister interface {
	// List lists all StaticIPses in the indexer.
	List(selector labels.Selector) (ret []*v1.StaticIPs, err error)
	// StaticIPses returns an object that can list and get StaticIPses.
	StaticIPses(namespace string) StaticIPsNamespaceLister
	StaticIPsListerExpansion
}

// staticIPsLister implements the StaticIPsLister interface.
type staticIPsLister struct {
	indexer cache.Indexer
}

// NewStaticIPsLister returns a new StaticIPsLister.
func NewStaticIPsLister(indexer cache.Indexer) StaticIPsLister {
	return &staticIPsLister{indexer: indexer}
}

// List lists all StaticIPses in the indexer.
func (s *staticIPsLister) List(selector labels.Selector) (ret []*v1.StaticIPs, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.StaticIPs))
	})
	return ret, err
}

// StaticIPses returns an object that can list and get StaticIPses.
func (s *staticIPsLister) StaticIPses(namespace string) StaticIPsNamespaceLister {
	return staticIPsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StaticIPsNamespaceLister helps list and get StaticIPses.
type StaticIPsNamespaceLister interface {
	// List lists all StaticIPses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.StaticIPs, err error)
	// Get retrieves the StaticIPs from the indexer for a given namespace and name.
	Get(name string) (*v1.StaticIPs, error)
	StaticIPsNamespaceListerExpansion
}

// staticIPsNamespaceLister implements the StaticIPsNamespaceLister
// interface.
type staticIPsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StaticIPses in the indexer for a given namespace.
func (s staticIPsNamespaceLister) List(selector labels.Selector) (ret []*v1.StaticIPs, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.StaticIPs))
	})
	return ret, err
}

// Get retrieves the StaticIPs from the indexer for a given namespace and name.
func (s staticIPsNamespaceLister) Get(name string) (*v1.StaticIPs, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("staticips"), name)
	}
	return obj.(*v1.StaticIPs), nil
}
